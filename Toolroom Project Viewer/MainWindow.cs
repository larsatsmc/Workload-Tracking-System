using DevExpress.XtraScheduler;
using DevExpress.XtraScheduler.Xml;
using DevExpress.XtraGrid.Views.Base;
using System;
using System.ComponentModel;
using System.Data;
using System.Windows.Forms;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Base.ViewInfo;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraPrinting;
using DevExpress.XtraCharts;
using DevExpress.Charts.Model;
using System.Text;
using DevExpress.XtraRichEdit.API.Native;
using Toolroom_Scheduler;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace Toolroom_Project_Viewer
{
    public partial class MainWindow : DevExpress.XtraEditors.XtraForm
    {
        private string footerDateTime = "";
        private BindingList<CustomResource> CustomResourceCollection = new BindingList<CustomResource>();
        private BindingList<CustomAppointment> CustomEventList = new BindingList<CustomAppointment>();
        private BindingList<CustomDependency> CustomDependencyList = new BindingList<CustomDependency>();

        private string TimeUnits { get; set; } 
        private ProjectInfo Project { get; set; }

        public MainWindow()
        {
            this.TimeUnits = "Days";
            InitializeComponent();
            InitializeResources();
            InitializeAppointments();
            schedulerControl1.Start = DateTime.Today.AddDays(-7);

            populateProjectComboBox();
            populateTimeFrameComboBox();

            schedulerStorage2.Appointments.CommitIdToDataSource = false;

            schedulerControl2.Start = DateTime.Today.AddDays(-7);
            schedulerControl2.Views.GanttView.ResourcesPerPage = 15;
            schedulerControl2.GroupType = SchedulerGroupType.Resource;
            schedulerControl2.ActiveViewType = SchedulerViewType.Gantt;
            //InitializeExample();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            filterTaskView();
        }

        private void MainWindow_Load(object sender, EventArgs e)
        {
            //this.resourcesTableAdapter.Fill(this.workload_Tracking_System_DBDataSet.Resources);
            ////This line of code loads data into the 'workload_Tracking_System_DBDataSet.Projects' table. You can move, or remove it, as needed.
            //this.projectsTableAdapter.Fill(this.workload_Tracking_System_DBDataSet.Projects);
            ////This line of code loads data into the 'workload_Tracking_System_DBDataSet.Tasks' table. You can move, or remove it, as needed.
            //this.tasksTableAdapter.Fill(this.workload_Tracking_System_DBDataSet.Tasks);
        }

        private void InitializeExample()
        {

            //SchedulerStorage schedulerStorage = new SchedulerStorage();
            AppointmentStorage appointmentStorage = new AppointmentStorage(schedulerStorage1);

            //schedulerStorage.CreateAppointment(AppointmentType.Normal, DateTime.Today, DateTime.Today.AddDays(1), "First Appointment");
            // DataStorage can be substituted for Storage property.

            //schedulerControl1.DataStorage = schedulerStorage;
            //schedulerControl1.Refresh();

            //schedulerStorage1.CreateAppointment(AppointmentType.Normal, DateTime.Today, DateTime.Today.AddDays(1), "First Appointment");
            //schedulerControl1.Refresh();

            //schedulerControl1.DataStorage.Appointments.Add()

            //schedulerControl1.DataStorage.CreateAppointment(AppointmentType.Normal, DateTime.Today, DateTime.Today.AddDays(1));
            //schedulerControl1.Refresh();

            //Appointment apt = schedulerControl1.DataStorage.CreateAppointment(AppointmentType.Normal);
            //apt.Start = DateTime.Today;
            //apt.End = DateTime.Today.AddDays(1);
            //apt.Subject = "First appointment";

            //schedulerControl1.DataStorage.Appointments.Add(apt);

            //Appointment apt2 = schedulerControl1.DataStorage.CreateAppointment(AppointmentType.Normal, DateTime.Today, DateTime.Today.AddDays(2), "Second Appointment");
            //schedulerControl1.DataStorage.Appointments.Add(apt2);

            // How do I create a bunch of appointments from a datatable?

            //appointmentStorage.Add(schedulerControl1.DataStorage.CreateAppointment(AppointmentType.Normal, DateTime.Today, DateTime.Today.AddDays(2), "Second Appointment"));

            //schedulerControl1.DataStorage.Appointments.Add(schedulerControl1.DataStorage.CreateAppointment(AppointmentType.Normal, DateTime.Today, DateTime.Today.AddDays(2), "Second Appointment"));

            Database db = new Database();

            schedulerStorage1.Appointments.ResourceSharing = true;

            AppointmentMappingInfo appointmentMappings = schedulerStorage1.Appointments.Mappings;

            appointmentMappings.Start = "StartDate";
            appointmentMappings.End = "FinishDate";
            appointmentMappings.Subject = "Subject";
            appointmentMappings.Location = "Machine";

            //appointmentMappings.ResourceId = {"ToolMaker"};

            schedulerStorage1.Appointments.DataSource = db.getAppointmentData();

            ResourceIdCollection resourceIdCollection = new ResourceIdCollection();

            resourceIdCollection.Add(schedulerStorage1.Resources[0].Id);
            resourceIdCollection.Add(schedulerStorage1.Resources[1].Id);

            foreach (Resource item in schedulerStorage1.Resources.Items)
            {
                // Displays whatever is specified as the resource id such as the database id or the combined first and last names.
                Console.WriteLine(item.Id);
            }

            //foreach (Resource item in resourceIdCollection)
            //{
            //    Console.WriteLine(item.Id);
            //}

            AppointmentResourceIdCollectionContextElement multi_resource = new AppointmentResourceIdCollectionContextElement(resourceIdCollection);
            appointmentMappings.ResourceId = multi_resource.ValueToString();

            // Displays xml code ids for resources.
            Console.WriteLine(multi_resource.ValueToString());

            foreach (Appointment apt in schedulerStorage1.Appointments.Items)
            {
                apt.ResourceId = multi_resource.ValueToString();

                //foreach (string id in apt.ResourceIds)
                //{
                //    // Display's xml code ids.
                //    Console.WriteLine(id);
                //}
            }

            schedulerControl1.GroupType = SchedulerGroupType.Resource;
        }

        #region Schedule View

        private void InitializeResources()
        {
            Database db = new Database();

            ResourceStorage resourceStorage = new ResourceStorage(schedulerStorage1);
            ResourceMappingInfo resourceMappings = schedulerStorage1.Resources.Mappings;

            resourceMappings.Caption = "ResourceName";
            resourceMappings.Id = "ResourceName";

            schedulerStorage1.Resources.DataSource = db.getResourceData();

            for (int i = 0; i < schedulerStorage1.Resources.Items.Count; i++)
            {
                //Console.WriteLine($"{schedulerStorage1.Resources[i].Id} {schedulerStorage1.Resources[i].Caption}");
            }
        }

        private void InitializeAppointments()
        {
            Database db = new Database();

            //schedulerStorage1.Appointments.ResourceSharing = true;

            AppointmentMappingInfo appointmentMappings = schedulerStorage1.Appointments.Mappings;

            appointmentMappings.AppointmentId = "ID";
            appointmentMappings.Start = "StartDate";
            appointmentMappings.End = "FinishDate";
            appointmentMappings.Subject = "Subject";
            appointmentMappings.Location = "Location";
            appointmentMappings.Description = "Notes";
            appointmentMappings.ResourceId = "Resource";

            schedulerStorage1.Appointments.DataSource = db.getAppointmentData(departmentComboBox.Text);
        }

        private void getAppointments()
        {
            DataTable dt = new DataTable();

            dt.Columns.Add("ID", typeof(int));
            dt.Columns.Add("TaskName", typeof(string));
            dt.Columns.Add("StartDate", typeof(DateTime));
            dt.Columns.Add("FinishDate", typeof(DateTime));

            foreach (Appointment apt in schedulerStorage1.Appointments.Items)
            {
                dt.Rows.Add(apt.Id, apt.Subject, apt.Start, apt.End);
            }

            foreach (DataRow nrow in dt.Rows)
            {
                Console.WriteLine($"{nrow["ID"].ToString()} {nrow["TaskName"].ToString()} {nrow["StartDate"]} {nrow["FinishDate"]}");
            }
        }

        private bool updateTaskStorage1(Appointment apt)
        {
            Database db = new Database();
            int n = 0, projectNumber, taskID, length, length2;
            string jobNumber, component;

            var subjectArr1 = apt.Subject.Split(' ');
            var subjectArr2 = apt.Subject.Split('-');

            length = subjectArr1[0].Length + subjectArr1[1].Length + 2; // find total length of job number + project number + delimitors
            length2 = subjectArr2[1].Length + 1; // find total length of task id + delimitor

            n = apt.Subject.ToString().Count(x => x == '-'); // find number of dashes in subject string

            jobNumber = subjectArr1[0];
            projectNumber = Convert.ToInt16(subjectArr1[1].Substring(1));
            component = apt.Subject.Substring(length - 1, apt.Subject.Length - length - length2);
            taskID = Convert.ToInt16(subjectArr2[n]);

            if (db.updateTask(jobNumber, projectNumber, component, taskID, apt.Start, apt.End))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void departmentComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            InitializeAppointments();
        }

        private void refreshButton_Click(object sender, EventArgs e)
        {
            InitializeAppointments();
            schedulerControl1.RefreshData();
        }

        private void schedulerControl1_DragDrop(object sender, DragEventArgs e)
        {
            //MessageBox.Show("DragDrop");
        }

        private void schedulerControl1_AppointmentResized(object sender, AppointmentResizeEventArgs e)
        {
            //MessageBox.Show("Resize");
        }

        private void schedulerStorage1_AppointmentsChanged(object sender, PersistentObjectsEventArgs e)
        {
            foreach (Appointment apt in e.Objects)
            {
                if (updateTaskStorage1(apt))
                {

                }
                else
                {
                    InitializeAppointments();
                    schedulerControl1.RefreshData();
                }
                //MessageBox.Show(apt.Subject);
            }

            //updateAppointment((Appointment)e.Objects);
            //getAppointments();
            //MessageBox.Show("AppointmentChanged");
        }

        #endregion

        #region Task View

        private void filterTaskView()
        {
            if (departmentComboBox2.Text == "Program Rough")
            {
                gridView1.ActiveFilterString = "[TaskName] = 'Program Rough'  AND [Status] = NULL";
            }
            else if (departmentComboBox2.Text == "Program Finish")
            {
                gridView1.ActiveFilterString = "[TaskName] = 'Program Finish' AND [Status] = NULL";
            }
            else if (departmentComboBox2.Text == "Program Electrodes")
            {
                gridView1.ActiveFilterString = "[TaskName] = 'Program Electrodes' AND [Status] = NULL";
            }
            else if (departmentComboBox2.Text == "CNC Rough")
            {
                gridView1.ActiveFilterString = "[TaskName] = 'CNC Rough' AND [Status] = NULL";
            }
            else if (departmentComboBox2.Text == "CNC Finish")
            {
                gridView1.ActiveFilterString = "[TaskName] = 'CNC Finish' AND [Status] = NULL";
            }
            else if (departmentComboBox2.Text == "CNC Electrodes")
            {
                gridView1.ActiveFilterString = "[TaskName] = 'CNC Electrodes' AND [Status] = NULL";
            }
            else if (departmentComboBox2.Text == "Inspection")
            {
                gridView1.ActiveFilterString = "[TaskName] LIKE 'Inspection%' AND [Status] = NULL";
            }

            footerDateTime = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
        }

        private void createHeaderRTFString()
        {
            StringBuilder tableRtf = new StringBuilder();

            tableRtf.Append(@"{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}}");
            for (int j = 0; j < 1; j++) // j represents the number of rows to create.
            {
                // Start the row.
                tableRtf.Append(@"\trowd\b");

                tableRtf.Append(@"\clbrdrt\brdrs\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs");
                // First cell with width 1000. Font style to bold.
                tableRtf.Append(@"\cellx3838");
                tableRtf.Append(@"\clbrdrt\brdrs\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs");
                tableRtf.Append(@" Job Number: All");
                tableRtf.Append(@"\intbl\cell");
                tableRtf.Append(@"\cellx7676\qc");
                tableRtf.Append(@"\intbl");
                tableRtf.Append(" " + "Department: " + departmentComboBox2.Text);
                tableRtf.Append(@"\cell");
                tableRtf.Append(@"\clbrdrt\brdrs\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs");
                tableRtf.Append(@"\cellx11514");
                tableRtf.Append(" " + "Components: All");
                tableRtf.Append(@"\intbl\cell");
                // Append the row in StringBuilder.
                tableRtf.Append(@"\b0 \row");
            }

            tableRtf.Append(@"\pard");
            tableRtf.Append(@"}");

            richTextBox1.Rtf = tableRtf.ToString();
        }

        private void createHeaderRTFString2()
        {
            DevExpress.XtraRichEdit.API.Native.Document document = richEditControl1.Document;

            richEditControl1.Document.DefaultCharacterProperties.Bold = true;

            richEditControl1.RtfText = "";

            #region #CreatTable

            Table table = richEditControl1.Document.Tables.Create(richEditControl1.Document.Range.Start, 1, 3);

            //Set the width of the first column
            table.Rows[0].FirstCell.PreferredWidthType = WidthType.Fixed;
            table.Rows[0].FirstCell.PreferredWidth = DevExpress.Office.Utils.Units.InchesToDocumentsF(2.7f);

            //Set the width of the second column
            table[0, 1].PreferredWidthType = WidthType.Fixed;
            table[0, 1].PreferredWidth = DevExpress.Office.Utils.Units.InchesToDocumentsF(2.7f);

            //Set the width of the third column
            table.Rows[0].LastCell.PreferredWidthType = WidthType.Fixed;
            table.Rows[0].LastCell.PreferredWidth = DevExpress.Office.Utils.Units.InchesToDocumentsF(2.7f);

            #endregion #CreateTable

            document.DefaultCharacterProperties.Bold = true;
            document.DefaultCharacterProperties.FontName = "Microsoft Sans Serif";
            document.DefaultCharacterProperties.FontSize = 11;

            document.InsertSingleLineText(table[0, 0].Range.Start, "Job Number: All");

            document.InsertSingleLineText(table[0, 1].Range.Start, "Department: " + departmentComboBox2.Text);

            document.InsertSingleLineText(table[0, 2].Range.Start, "Component: All");

            //The target range is the left cell.
            DocumentRange leftCell = table[0, 0].Range;

            //Provide access to the paragraph options 
            ParagraphProperties leftHeader = richEditControl1.Document.BeginUpdateParagraphs(leftCell);

            leftHeader.Alignment = ParagraphAlignment.Left;

            //The target range is the center cell.
            DocumentRange centerCell = table[0, 1].Range;

            //Provide access to the paragraph options 
            ParagraphProperties centerHeader = richEditControl1.Document.BeginUpdateParagraphs(centerCell);

            centerHeader.Alignment = ParagraphAlignment.Center;

            //The target range is the right cell.
            DocumentRange rightCell = table[0, 2].Range;

            //Provide access to the paragraph options 
            ParagraphProperties rightHeader = richEditControl1.Document.BeginUpdateParagraphs(rightCell);

            rightHeader.Alignment = ParagraphAlignment.Right;

            // Must include these lines to allow program to close.
            document.EndUpdateParagraphs(leftHeader);
            document.EndUpdateParagraphs(centerHeader);
            document.EndUpdateParagraphs(rightHeader);

            // Get rid of cell borders.
            for (int i = 0; i <= 2; i++)
            {
                ChangeCellBorderColor(table[0, i]);
            }

        }

        private void openKanBanWorkbook(int rowIndex)
        {
            string jobNumber, component;
            int projectNumber;
            //string column = gridView1.FocusedColumn.FieldName;
            //int rowIndex = gridView1.FocusedRowHandle;
            Database db = new Database();

            if (rowIndex >= 0)
            {
                component = gridView1.GetRowCellValue(rowIndex, gridView1.Columns["Component"]).ToString();
                jobNumber = gridView1.GetRowCellValue(rowIndex, gridView1.Columns["JobNumber"]).ToString();
                projectNumber = Convert.ToInt32(gridView1.GetRowCellValue(rowIndex, gridView1.Columns["ProjectNumber"]));
                //MessageBox.Show("Component");
                db.openKanBanWorkbook(db.getKanBanWorkbookPath(jobNumber, projectNumber), component);
            }
        }

        public static void ChangeCellBorderColor(TableCell cell)
        {
            //Specify the border style and the background color for the header cells 
            cell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
            cell.Borders.Left.LineStyle = TableBorderLineStyle.None;
            cell.Borders.Right.LineStyle = TableBorderLineStyle.None;
            cell.Borders.Top.LineStyle = TableBorderLineStyle.None;
        }

        private void departmentComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            filterTaskView();
        }

        private void gridControl1_MouseDown(object sender, MouseEventArgs e)
        {
            GridControl grid = sender as GridControl;
            if (grid == null) return;
            // Get a View at the current point.
            BaseView view = grid.GetViewAt(e.Location);
            // Retrieve information on the current View element.
            BaseHitInfo baseHI = view.CalcHitInfo(e.Location);
            GridHitInfo gridHI = baseHI as GridHitInfo;
            if (gridHI != null)
                Text = gridHI.HitTest.ToString();

            //MessageBox.Show(Text);

            if (Text == "RowCell" && gridHI.Column.ToString() == "Component")
            {
                openKanBanWorkbook(gridHI.RowHandle);
            }
        }

        private void printTaskViewButton_Click(object sender, EventArgs e)
        {
            // Check whether the GridControl can be previewed.
            if (!gridControl1.IsPrintingAvailable)
            {
                MessageBox.Show("The 'DevExpress.XtraPrinting' library is not found", "Error");
                return;
            }

            //createHeaderRTFString(); // This method sets the richTextBox.rtf.
            //createHeaderRTFString2();

            //Console.WriteLine(richEditControl1.RtfText);
            //gridView1.OptionsPrint.RtfPageHeader = richTextBox1.Rtf;

            gridView1.OptionsPrint.RtfPageHeader = @"{\rtf1\deff0{\fonttbl{\f0 Calibri;}{\f1 Microsoft Sans Serif;}}{\colortbl ;\red0\green0\blue255 ;}{\*\defchp \b\f1\fs22}{\stylesheet {\ql\b\f1\fs22 Normal;}{\*\cs1\b\f1\fs22 Default Paragraph Font;}{\*\cs2\sbasedon1\b\f1\fs22 Line Number;}{\*\cs3\b\ul\f1\fs22\cf1 Hyperlink;}{\*\ts4\tsrowd\b\f1\fs22\ql\tscellpaddfl3\tscellpaddl108\tscellpaddfb3\tscellpaddfr3\tscellpaddr108\tscellpaddft3\tsvertalt\cltxlrtb Normal Table;}{\*\ts5\tsrowd\sbasedon4\b\f1\fs22\ql\trbrdrt\brdrs\brdrw10\trbrdrl\brdrs\brdrw10\trbrdrb\brdrs\brdrw10\trbrdrr\brdrs\brdrw10\trbrdrh\brdrs\brdrw10\trbrdrv\brdrs\brdrw10\tscellpaddfl3\tscellpaddl108\tscellpaddfr3\tscellpaddr108\tsvertalt\cltxlrtb Table Simple 1;}}{\*\listoverridetable}{\info{\creatim\yr2018\mo1\dy10\hr10\min20}{\version1}}\nouicompat\splytwnine\htmautsp\sectd\trowd\irow0\irowband-1\lastrow\ts5\trbrdrt\brdrs\brdrw10\trbrdrl\brdrs\brdrw10\trbrdrb\brdrs\brdrw10\trbrdrr\brdrs\brdrw10\trbrdrh\brdrs\brdrw10\trbrdrv\brdrs\brdrw10\trleft-108\trautofit1\trpaddfl3\trpaddl108\trpaddfr3\trpaddr108\tbllkhdrcols\tbllkhdrrows\tbllknocolband\clvertalt\clbrdrt\brdrnone\brdrw10\clbrdrl\brdrnone\brdrw10\clbrdrb\brdrnone\brdrw10\clbrdrr\brdrnone\brdrw10\cltxlrtb\clftsWidth3\clwWidth3888\clpadfr3\clpadr108\clpadft3\clpadt108\cellx3810\clvertalt\clbrdrt\brdrnone\brdrw10\clbrdrl\brdrnone\brdrw10\clbrdrb\brdrnone\brdrw10\clbrdrr\brdrnone\brdrw10\cltxlrtb\clftsWidth3\clwWidth3888\clpadfr3\clpadr108\clpadft3\clpadt108\cellx7710\clvertalt\clbrdrt\brdrnone\brdrw10\clbrdrl\brdrnone\brdrw10\clbrdrb\brdrnone\brdrw10\clbrdrr\brdrnone\brdrw10\cltxlrtb\clftsWidth3\clwWidth3888\clpadfr3\clpadr108\clpadft3\clpadt108\cellx11610\pard\plain\ql\intbl\yts5{\b\f1\fs22\cf0 Job Number: All}\b\f1\fs22\cell\pard\plain\qc\intbl\yts5{\b\f1\fs22\cf0 Department: " + departmentComboBox2.Text + @"}\b\f1\fs22\cell\pard\plain\qr\intbl\yts5{\b\f1\fs22\cf0 Component: All}\b\f1\fs22\cell\trowd\irow0\irowband-1\lastrow\ts5\trbrdrt\brdrs\brdrw10\trbrdrl\brdrs\brdrw10\trbrdrb\brdrs\brdrw10\trbrdrr\brdrs\brdrw10\trbrdrh\brdrs\brdrw10\trbrdrv\brdrs\brdrw10\trleft-108\trautofit1\trpaddfl3\trpaddl108\trpaddfr3\trpaddr108\tbllkhdrcols\tbllkhdrrows\tbllknocolband\clvertalt\clbrdrt\brdrnone\brdrw10\clbrdrl\brdrnone\brdrw10\clbrdrb\brdrnone\brdrw10\clbrdrr\brdrnone\brdrw10\cltxlrtb\clftsWidth3\clwWidth3888\clpadfr3\clpadr108\clpadft3\clpadt108\cellx3810\clvertalt\clbrdrt\brdrnone\brdrw10\clbrdrl\brdrnone\brdrw10\clbrdrb\brdrnone\brdrw10\clbrdrr\brdrnone\brdrw10\cltxlrtb\clftsWidth3\clwWidth3888\clpadfr3\clpadr108\clpadft3\clpadt108\cellx7710\clvertalt\clbrdrt\brdrnone\brdrw10\clbrdrl\brdrnone\brdrw10\clbrdrb\brdrnone\brdrw10\clbrdrr\brdrnone\brdrw10\cltxlrtb\clftsWidth3\clwWidth3888\clpadfr3\clpadr108\clpadft3\clpadt108\cellx11610\row\pard\plain\ql\b\f1\fs22\par}";
            //gridView1.OptionsPrint.RtfPageHeader = richEditControl1.RtfText;
            gridView1.OptionsPrint.RtfPageFooter = @"{\rtf1\ansi {\fonttbl\f0\ Microsoft Sans Serif;} \f0\pard \fs18 \qr \b Report Date: " + footerDateTime + @"\b0 \par}";

            // Print the gridView control.
            gridView1.GridControl.Print();

            // Open the Preview window.
            //gridView1.ShowPrintPreview();
        }

        private void gridView1_PrintInitialize(object sender, PrintInitializeEventArgs e)
        {
            PrintingSystemBase pb = e.PrintingSystem as PrintingSystemBase;


            //pb.PageSettings.PaperKind = System.Drawing.Printing.PaperKind.Letter;
            //pb.PageSettings.Landscape = true;

            pb.PageSettings.TopMargin = 20;
            pb.PageSettings.BottomMargin = 20;
            pb.PageSettings.LeftMargin = 25;
            pb.PageSettings.RightMargin = 25;

        }

        private void RefreshTasksButton_Click(object sender, EventArgs e)
        {
            sqlDataSource1.Fill();
        }

        #endregion

        #region Chart View

        private void LoadGraph(List<Week> weekList)
        {
            Database db = new Database();
            Series tempSeries;

            int i = 0;

            chartControl1.Series.Clear();

            string[] departmentArr = { "Program Rough", "Program Finish", "Program Electrodes", "CNC Rough", "CNC Finish", "CNC Electrodes", "EDM Sinker", "EDM Wire (In-House)", "Polish (In-House)", "Inspection", "Grind"};
            List<string> weekTitleArr = new List<string>();
            DataTable dailyDeptCapacities = db.GetDailyDepartmentCapacities();
            int dailyCapacity;

            for (int n = 0; n < 20; n++)
            {
                weekTitleArr.Add(n.ToString());
            }

            //SideBySideBarSeries series = new SideBySideBarSeries();
            //Series series1 = new Series("Program Rough Hours", ViewType.Bar);
            //Series series2 = new Series("Program Finish Hours", ViewType.Bar);
            //Series series3 = new Series("Program Electrode Hours", ViewType.Bar);

            if (TimeUnits == "Days")
            {
                foreach(Week week in weekList)
                {
                    dailyCapacity = dailyDeptCapacities.AsEnumerable().Where(p => p.Field<string>("Department").ToString().Contains(week.Department)).Select(p => p.Field<int>("DailyCapacity")).FirstOrDefault();
                    tempSeries = new Series(week.Department + " Hours (Cap. " + dailyCapacity + ")", ViewType.Bar);

                    foreach (Day day in week.DayList)
                    {
                        tempSeries.Points.Add(new SeriesPoint(day.DayName, day.Hours));
                    }

                    chartControl1.Series.Add(tempSeries);
                }
            }
            else if(TimeUnits == "Weeks")
            {
                foreach (string dept in departmentArr)
                {
                    dailyCapacity = dailyDeptCapacities.AsEnumerable().Where(p => p.Field<string>("Department").ToString().Contains(dept)).Select(p => p.Field<int>("DailyCapacity")).FirstOrDefault();
                    tempSeries = new Series(dept + " Hours (Cap." + dailyCapacity * 5 + ")", ViewType.Bar);
                    
                    var deptWeeks = from wks in weekList
                                    where wks.Department == dept
                                    orderby wks.WeekStart
                                    select wks;

                    foreach (Week week in deptWeeks)
                    {
                        // weekTitleArr[i++]
                        tempSeries.Points.Add(new SeriesPoint("WK " + weekTitleArr[i++], week.GetWeekHours()));
                    }

                    chartControl1.Series.Add(tempSeries);

                    i = 0;
                }
            }
        }

        private void LoadGraph(Week week)
        {
            chartControl2.Series.Clear();

            //SideBySideBarSeries series = new SideBySideBarSeries();
            Series series1 = new Series(week.Department + " Hours", ViewType.Bar);
            //Series series2 = new Series("Program Finish Hours", ViewType.Bar);
            //Series series3 = new Series("Program Electrode Hours", ViewType.Bar);

            foreach (Day day in week.DayList)
            {
                series1.Points.Add(new SeriesPoint(day.DayName, day.Hours));
            }

            chartControl2.Series.Add(series1);
            
        }

        private void populateTimeFrameComboBox()
        {
            DateTime weekStart = new DateTime();

            weekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);

            timeFrameComboBoxEdit.Properties.Items.Clear();

            if (TimeUnits == "Days")
            {
                for (int i = 0; i < 20; i++)
                {
                    // One week spans of time.
                    timeFrameComboBoxEdit.Properties.Items.Add($"{weekStart.AddDays(i * 7).ToShortDateString()} - {weekStart.AddDays(i * 7 + 6).ToShortDateString()}");
                }
            }
            else if(TimeUnits == "Weeks")
            {
                // 20 week spans of time.
                timeFrameComboBoxEdit.Properties.Items.Add($"{weekStart.ToShortDateString()} - {weekStart.AddDays((19 * 7 + 6)).ToShortDateString()}");
            }
        }

        private int GetDeptDailyCapacity(string department, DataTable deptCapacityDT)
        {
            //var result = from DataRow myRow in deptCapacityDT.Rows
            //             where myRow.Field<string>("Department") == department
            //             select new { dailyCapacity = myRow.Field<int>("DailyCapacity") };

            //int dailyCapacity = deptCapacityDT.AsEnumerable().Where(p => p.Field<string>("Department") == department).Select(p => p.Field<int>("DailyCapacity")).FirstOrDefault();

            return deptCapacityDT.AsEnumerable().Where(p => p.Field<string>("Department") == department).Select(p => p.Field<int>("DailyCapacity")).FirstOrDefault();
        }

        private void GetOverallToolRoomHours()
        {
            Database db = new Database();
            List<Week> weeks = new List<Week>();

            if (timeFrameComboBoxEdit.Text != "")
            {
                string weekStart, weekEnd;

                weekStart = timeFrameComboBoxEdit.Text.Split(' ')[0];
                weekEnd = timeFrameComboBoxEdit.Text.Split(' ')[2];

                if (TimeUnits == "Days")
                {
                    weeks = db.getDayHours(weekStart, weekEnd);
                }
                else if (TimeUnits == "Weeks")
                {
                    weeks = db.getWeekHours(weekStart, weekEnd);
                }

                LoadGraph(weeks);
            }
        }

        private void GetDepartmentHours()
        {
            Database db = new Database();
            Week week;

            if (timeFrameComboBoxEdit.Text != "" && departmentComboBox3.Text != "")
            {
                string weekStart, weekEnd;

                weekStart = timeFrameComboBoxEdit.Text.Split(' ')[0];
                weekEnd = timeFrameComboBoxEdit.Text.Split(' ')[2];

                week = db.getDayHours(weekStart, weekEnd).Find(x => x.Department == departmentComboBox3.Text);

                LoadGraph(week);
            }
        }

        private void RefreshChartButton_Click(object sender, EventArgs e)
        {
            GetOverallToolRoomHours();
            GetDepartmentHours();
        }

        private void departmentComboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            GetDepartmentHours();
        }

        private void timeFrameComboBoxEdit_SelectedIndexChanged(object sender, EventArgs e)
        {
            GetOverallToolRoomHours();
            GetDepartmentHours();
        }

        private void TimeUnitsComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if(TimeUnitsComboBox.Text == "Days")
            {
                this.TimeUnits = "Days";
                populateTimeFrameComboBox();
                timeFrameComboBoxEdit.SelectedIndex = 0;
            }
            else if (TimeUnitsComboBox.Text == "Weeks")
            {
                this.TimeUnits = "Weeks";
                populateTimeFrameComboBox();
                timeFrameComboBoxEdit.SelectedIndex = 0;
            }
        }

        #endregion

        #region Gantt View

        private void LoadProject()
        {
            Database db = new Database();
            var number = getComboBoxInfo();
            ProjectInfo project = db.GetProject(number.jobNumber, number.projectNumber);

            schedulerStorage2.Appointments.ResourceSharing = true;

            InitializeResources(project);

            GenerateEventList(CustomEventList, project);

            AppointmentMappingInfo appointmentMappings = schedulerStorage2.Appointments.Mappings;

            appointmentMappings.AppointmentId = "AppointmentID";

            appointmentMappings.Subject = "Subject";
            appointmentMappings.Location = "Location";
            //appointmentMappings.Description = "Notes";
            appointmentMappings.ResourceId = "OwnerId";
            appointmentMappings.Start = "StartDate";
            appointmentMappings.End = "FinishDate";

            schedulerStorage2.Appointments.DataSource = CustomEventList;

            Console.WriteLine("Check Appointments");

            for (int i = 0; i < schedulerStorage2.Appointments.Count; i++)
            {
                Appointment appointment = schedulerStorage2.Appointments[i];
                Console.WriteLine($"{appointment.Subject} {appointment.Location} {appointment.ResourceId} {appointment.Start} {appointment.End}");
            }

            InitializeDependencies(project);

            AppointmentDependencyMappingInfo appointmentDependencyMappingInfo = schedulerStorage2.AppointmentDependencies.Mappings;

            appointmentDependencyMappingInfo.DependentId = "DepID";
            appointmentDependencyMappingInfo.ParentId = "ParentID";

            schedulerStorage2.AppointmentDependencies.DataSource = CustomDependencyList;

            Console.WriteLine("Check Appointment Dependencies");

            for (int i = 0; i < schedulerStorage2.AppointmentDependencies.Count; i++)
            {
                AppointmentDependency appointmentDependency = schedulerStorage2.AppointmentDependencies[i];
                Console.WriteLine($"{appointmentDependency.DependentId} {appointmentDependency.ParentId}");
            }
        }

        private void InitializeResources(ProjectInfo project)
        {
            int i = 0;
            int ParentID = 0;

            //CustomResourceCollection.Clear();
            CustomResourceCollection = new BindingList<CustomResource>();

            foreach (Toolroom_Scheduler.Component component in project.ComponentList)
            {
                ParentID = i;
                CustomResourceCollection.Add(CreateCustomResource(i++, -1, component.Name));

                foreach (TaskInfo task in component.TaskList)
                {
                    CustomResourceCollection.Add(CreateCustomResource(i++, ParentID, task.TaskName));
                }
            }

            ResourceMappingInfo mappings = this.schedulerStorage2.Resources.Mappings;

            mappings.Id = "ResID";
            //mappings.Color = "ResColor";
            mappings.Caption = "Name";
            mappings.ParentId = "ParentID";

            schedulerStorage2.Resources.Clear();

            schedulerStorage2.Resources.DataSource = CustomResourceCollection;

            Console.WriteLine("Initialize Resources");

            for (int id = 0; id < schedulerStorage2.Resources.Count; id++)
            {
                Resource resource = schedulerStorage2.Resources[id];

                Console.WriteLine($"{resource.Id} {resource.Caption} {resource.ParentId}");
            }
        }

        private void GenerateEventList(BindingList<CustomAppointment> eventList, ProjectInfo project)
        {
            int i = 0;
            int baseCount;

            foreach (Toolroom_Scheduler.Component component in project.ComponentList)
            {
                baseCount = i++;

                foreach (TaskInfo task in component.TaskList)
                {
                    Resource resource = schedulerStorage2.Resources[i++];
                    eventList.Add(CreateEvent(task.ID + baseCount, project.JobNumber + " #" + project.ProjectNumber + " " + component.Name, resource.Id, task.TaskName, task.StartDate, task.FinishDate));
                }
            }

            Console.WriteLine("Initialize Appointments");

            foreach (CustomAppointment apt in eventList)
            {
                //Resource resource = schedulerStorage2.Resources[Convert.ToInt16(apt.OwnerId)];
                Console.WriteLine($"{apt.AppointmentID} {apt.Subject} {apt.OwnerId} {apt.Subject}");
            }
        }

        private CustomResource CreateCustomResource(int res_id, int parent_Id, string caption)
        {
            CustomResource cr = new CustomResource();
            cr.ResID = res_id;
            cr.ParentID = parent_Id;
            cr.Name = caption;
            return cr;
        }

        private CustomAppointment CreateEvent(int appointmentId, string subject, object resourceId, string location, DateTime startDate, DateTime finishDate)
        {
            CustomAppointment apt = new CustomAppointment();

            apt.AppointmentID = appointmentId;
            apt.Subject = subject;
            apt.Location = location;
            apt.OwnerId = resourceId;
            apt.StartDate = startDate;
            apt.FinishDate = finishDate;

            return apt;
        }

        private CustomDependency CreateCustomDependency(int dep_id, int par_id)
        {
            CustomDependency cd = new CustomDependency();
            cd.DepID = dep_id;
            cd.ParentID = par_id;

            return cd;
        }

        private void InitializeDependencies(ProjectInfo project)
        {
            int aID = 1;
            int baseCount;

            foreach (Toolroom_Scheduler.Component component in project.ComponentList)
            {
                baseCount = aID - 1;

                foreach (TaskInfo task in component.TaskList)
                {
                    task.ChangeIDs(baseCount);

                    if (task.Predecessors.Contains(","))
                    {
                        foreach (string predID in task.Predecessors.Split(','))
                        {
                            CustomDependencyList.Add(CreateCustomDependency(aID, Convert.ToInt32(predID)));
                        }

                        aID++;
                    }
                    else if (task.Predecessors != "")
                    {
                        CustomDependencyList.Add(CreateCustomDependency(aID++, Convert.ToInt32(task.Predecessors)));
                    }
                    else
                    {
                        aID++;
                    }

                }
            }
        }

        private void populateProjectComboBox()
        {
            Database db = new Database();

            projectComboBox.Properties.Items.Clear();

            foreach (string item in db.getJobNumberComboList())
            {
                projectComboBox.Properties.Items.Add(item);
            }
        }

        private void LoadProject(string jobNumber, int projectNumber)
        {
            Database db = new Database();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();

            Project = db.GetProject(jobNumber, projectNumber);

            //dt = db.getProjectData(jobNumber, projectNumber);

            foreach (Toolroom_Scheduler.Component compi in Project.ComponentList)
            {
                foreach (TaskInfo taski in compi.TaskList)
                {
                    Console.WriteLine(compi.Name + " " + taski.ID + " " + taski.TaskName);
                }
            }

            dt1 = db.LoadProjectToDataTable(Project);

            ResourceMappingInfo resourceMappings = this.schedulerStorage2.Resources.Mappings;

            resourceMappings.Id = "NewTaskID";
            resourceMappings.ParentId = "ParentID"; // Need this for hierarchy in resource tree.
            resourceMappings.Caption = "TaskName"; // In the Resource tree designer the field name has to match the field that is mapped to caption.

            dt2 = db.getProjectResourceData(Project);

            schedulerStorage2.Resources.Clear();

            Stopwatch sw = new Stopwatch();
            sw.Start();

            schedulerStorage2.Resources.DataSource = dt2; // Woohoo!! This finally works!

            //int i = 1;

            //THIS WORKS FOR SOME REASON.

            //foreach (DataRow nrow in dt2.Rows)
            //{
            //    Resource resource = schedulerStorage2.CreateResource(i, nrow["TaskName"].ToString());
            //    resource.ParentId = nrow["ParentID"];

            //    schedulerStorage2.Resources.Add(resource);
            //    i++;
            //}

            //THIS DOES NOT.

            //foreach (DataRow nrow in dt2.Rows)
            //{
            //    if (nrow["ParentID"] == DBNull.Value)
            //    {
            //        CustomResourceCollection.Add(CreateCustomResource(i++, -1, nrow["TaskName"].ToString()));
            //    }
            //    else
            //    {
            //        //Console.WriteLine($"{i}, {nrow["ParentID"]}, {nrow["TaskName"].ToString()}");
            //        CustomResourceCollection.Add(CreateCustomResource(i++, Convert.ToInt32(nrow["ParentID"]), nrow["TaskName"].ToString()));
            //    }
            //}

            //this.schedulerStorage2.Resources.DataSource = CustomResourceCollection;

            Console.WriteLine(sw.Elapsed);

            AppointmentMappingInfo appointmentMappings = schedulerStorage2.Appointments.Mappings;

            appointmentMappings.AppointmentId = "TaskID";
            appointmentMappings.Start = "StartDate";
            appointmentMappings.End = "FinishDate";
            appointmentMappings.Subject = "Subject";
            appointmentMappings.Location = "Location";
            appointmentMappings.Description = "Notes";
            appointmentMappings.PercentComplete = "PercentComplete";
            appointmentMappings.ResourceId = "NewTaskID";

            schedulerStorage2.Appointments.DataSource = dt1;

            AppointmentDependencyMappingInfo appointmentDependencyMappingInfo = schedulerStorage2.AppointmentDependencies.Mappings;

            appointmentDependencyMappingInfo.DependentId = "DependentId";
            appointmentDependencyMappingInfo.ParentId = "ParentId";

            schedulerStorage2.AppointmentDependencies.DataSource = db.getDependencyData(dt1);
        }

        private void projectComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            var number = getComboBoxInfo();

            //LoadProject();
            LoadProject(number.jobNumber, number.projectNumber);
        }

        private void resourcesTree1_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            //if (schedulerControl2.Storage != null)
            //{
            //    Resource resource = schedulerControl2.Storage.Resources.Items.Find(r => r.Caption == e.CellText);
            //    e.Appearance.BackColor = resource.GetColor();
            //}
        }

        private void schedulerStorage2_AppointmentsChanged(object sender, PersistentObjectsEventArgs e)
        {
            foreach (Appointment apt in e.Objects)
            {
                if (updateTaskStorage2(apt))
                {
                    var number = getComboBoxInfo();
                    LoadProject(number.jobNumber, number.projectNumber);
                    schedulerControl2.RefreshData();
                }
                else
                {
                    var number = getComboBoxInfo();
                    LoadProject(number.jobNumber, number.projectNumber);
                    schedulerControl2.RefreshData();
                }
                //MessageBox.Show(apt.Subject);
            }
        }

        private void RefreshGanttButton_Click(object sender, EventArgs e)
        {
            populateProjectComboBox();
        }

        #endregion

        private (string jobNumber, int projectNumber) getComboBoxInfo()
        {
            string[] jobNumberComboBoxText, jobNumberComboBoxText2;

            jobNumberComboBoxText = projectComboBox.Text.Split(' ');
            jobNumberComboBoxText2 = projectComboBox.Text.Split('#');

            return (jobNumberComboBoxText[0], Convert.ToInt32(jobNumberComboBoxText2[1]));
        }

        private bool updateTaskStorage2(Appointment apt)
        {
            Database db = new Database();
            Toolroom_Scheduler.Component component;
            TaskInfo task;
            int n = 0;

            var number = getComboBoxInfo();

            Resource resource = schedulerStorage2.Resources[Convert.ToInt16(apt.ResourceId) - 1];

            resource = schedulerStorage2.Resources[Convert.ToInt16(resource.ParentId) - 1];

            component = Project.ComponentList.Find(x => x.Name == resource.Caption);

            n = apt.Subject.ToString().Count(x => x == '-');

            task = component.TaskList[Convert.ToInt16(apt.Subject.Split('-')[n]) - 1];

            if (db.updateTask(number.jobNumber, number.projectNumber, component.Name, task.ID, apt.Start, apt.End))
            {
                task.SetDates(apt.Start, apt.End);
                return true;
            }
            else
            {
                return false;
            }
        }

        private void chartControl1_CustomDrawCrosshair(object sender, CustomDrawCrosshairEventArgs e)
        {

            foreach (CrosshairElementGroup group in e.CrosshairElementGroups)
            {
                foreach (CrosshairElement element in group.CrosshairElements)
                {
                    //SeriesPoint currentPoint = element.SeriesPoint;

                    //if (currentPoint.Tag.GetType() == typeof(DataRowView))
                    //{
                    //    DataRowView rowView = (DataRowView)currentPoint.Tag;
                    //    string s = "Test";

                    //    element.LabelElement.Text = s;

                    //}
                }
            }
        }
    }
}
